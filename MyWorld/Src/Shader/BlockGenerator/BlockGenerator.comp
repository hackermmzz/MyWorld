#version 460 core
const int SECTION_SIZE=32;//一个区块大小
const int CHUNK_SIZE=8;//一个chunk的大小
const int FBM=6;//分形噪声采样次数
const int permutation_table_nums=256;//索引表元素数量
uniform  int permutation_table[permutation_table_nums];//索引表,在实际运行时会被更换成const
const int MAX_HEIGHT=int(SECTION_SIZE*CHUNK_SIZE/2);//最大高度
layout(local_size_x=SECTION_SIZE,local_size_y=1,local_size_z=SECTION_SIZE)in;
/////////////////////////////////////////
layout(std430) buffer ChunkBuffer
{
uint cube[];
};
////////////////////////////////////////
uniform vec2 pos;
/////////////////////////////////////////
const float noise2_factor=64.0;
const float noise3_threshold=0.01;
/////////////////////////////////////////
const int gradient2_table_nums=4;
const vec2 gradient2_table[gradient2_table_nums]={vec2(-1.0,-1.0),vec2(1.0,1.0),vec2(1.0,-1.0),vec2(-1.0,1.0)};
//////////////////
const int gradient3_table_nums=12;
const vec3 gradient3_table[gradient3_table_nums]=
{vec3(1.0,1.0,0.0),vec3(-1.0,1.0,0.0),vec3(1.0,-1.0,0.0),vec3(-1.0,-1.0,0.0),
vec3(1.0,0.0,1.0),vec3(-1.0,0.0,1.0),vec3(1.0,0.0,-1.0),vec3(-1.0,0.0,-1.0),
vec3(0.0,1.0,1.0),vec3(0.0,-1.0,1.0),vec3(0.0,1.0,-1.0),vec3(0.0,-1.0,-1.0)};
///////////////////////////柏林平滑曲线
float Smooth(float v)
{
return pow(v,3.0)*(v*(6.0*v-15.0)+10.0);
}
///////////////////////////根据索引获得二维梯度
vec2 get_gradient2(ivec2 index)
{
index%=permutation_table_nums;
index=abs(index);
ivec2 index_;
index_.x=permutation_table[index.x];
index_.y=permutation_table[index.y];
int final_index=(index_.x+index_.y)%gradient2_table_nums;
return gradient2_table[final_index];
}
//////////////////产生二维噪声
float generate_noise2(vec2 pos)
{
/////////////////////////////计算区块位置
pos/=SECTION_SIZE;
vec2 topleft=floor(pos);
vec2 topright=topleft+vec2(1.0,0.0);
vec2 bottomleft=topleft+vec2(0.0,1.0);
vec2 bottomright=topleft+vec2(1.0,1.0);
/////////////////////////////计算当前位置与区块的偏移
vec2 vec_topleft=pos-topleft;
vec2 vec_topright=pos-topright;
vec2 vec_bottomleft=pos-bottomleft;
vec2 vec_bottomright=pos-bottomright;
////////////////////////////////得到四个顶点的梯度
topleft=get_gradient2(ivec2(topleft));
topright=get_gradient2(ivec2(topright));
bottomleft=get_gradient2(ivec2(bottomleft));
bottomright=get_gradient2(ivec2(bottomright));
////////////////////////////////获得噪声值
float v1=dot(topleft,vec_topleft),v2=dot(topright,vec_topright);
float v3=dot(bottomleft,vec_bottomleft),v4=dot(bottomright,vec_bottomright);
float s1=Smooth(vec_topleft.x);
float v12=mix(v1,v2,s1),v34=mix(v3,v4,s1);
return mix(v12,v34,Smooth(vec_topleft.y));
}
//////////////////////////////////////////根据索引获取三维梯度
vec3 get_gradient3(ivec3 index)
{
index%=permutation_table_nums;
index=abs(index);
ivec3 index_;
index_.x=permutation_table[index.x];
index_.y=permutation_table[index.y];
index_.z=permutation_table[index.z];
int final_index=(index_.x+index_.y+index_.z)%gradient3_table_nums;
return gradient3_table[final_index];
}
//////////////////////////////////////////产生三维噪声
float generate_noise3(vec3 pos)
{
pos/=SECTION_SIZE;
vec3 lowtopleft=floor(pos);
vec3 lowtopright=lowtopleft+vec3(1.0,0.0,0.0);
vec3 lowbottomleft=lowtopleft+vec3(0.0,0.0,1.0);
vec3 lowbottomright=lowtopleft+vec3(1.0,0.0,1.0);
vec3 hightopleft=lowtopleft+vec3(0.0,1.0,0.0);
vec3 hightopright=hightopleft+vec3(1.0,0.0,0.0);
vec3 highbottomleft=hightopleft+vec3(0.0,0.0,1.0);
vec3 highbottomright=highbottomleft+vec3(1.0,0.0,1.0);
////////////////////////////////////////////////////计算当前位置与区块的偏移
vec3 vec_lowtopleft=pos-lowtopleft;
vec3 vec_lowtopright=pos-lowtopright;
vec3 vec_lowbottomleft=pos-lowbottomleft;
vec3 vec_lowbottomright=pos-lowbottomright;
vec3 vec_hightopleft=pos-hightopleft;
vec3 vec_hightopright=pos-hightopright;
vec3 vec_highbottomleft=pos-highbottomleft;
vec3 vec_highbottomright=pos-highbottomright;
////////////////////////////////////////////////////得到八个顶点的梯度
lowtopleft=get_gradient3(ivec3(lowtopleft));
lowtopright=get_gradient3(ivec3(lowtopright));
lowbottomleft=get_gradient3(ivec3(lowbottomleft));
lowbottomright=get_gradient3(ivec3(lowbottomright));
hightopleft=get_gradient3(ivec3(hightopleft));
hightopright=get_gradient3(ivec3(hightopright));
highbottomleft=get_gradient3(ivec3(highbottomleft));
highbottomright=get_gradient3(ivec3(highbottomright));
/////////////////////////////////////////////////对底面进行插值
float v1=dot(lowtopleft,vec_lowtopleft),v2=dot(lowtopright,vec_lowtopright);
float v3=dot(lowbottomleft,vec_lowbottomleft),v4=dot(lowbottomright,vec_lowbottomright);
float s1=Smooth(vec_lowtopleft.x);
float v12=mix(v1,v2,s1),v34=mix(v3,v4,s1);
float v56=mix(v12,v34,Smooth(vec_lowtopleft.z));
/////////////////////////////////////////////////对顶面进行插值
v1=dot(hightopleft,vec_hightopleft),v2=dot(hightopright,vec_hightopright);
v3=dot(highbottomleft,vec_highbottomleft),v4=dot(highbottomright,vec_highbottomright);
s1=Smooth(vec_hightopleft.x);
v12=mix(v1,v2,s1),v34=mix(v3,v4,s1);
float v78=mix(v12,v34,Smooth(vec_hightopleft.z));
return mix(v56,v78,Smooth(vec_lowtopleft.y));
}
void setcubedata(ivec3 pos,uint val)
{
uint index=pos.x*CHUNK_SIZE*SECTION_SIZE*SECTION_SIZE+pos.y*SECTION_SIZE+pos.z;
cube[index]=val;
}
void main()
{
vec2 noise2_pos=floor(pos/SECTION_SIZE)*SECTION_SIZE+gl_LocalInvocationID.xz;
float noise2_val=generate_noise2(noise2_pos)*noise2_factor;
int y=MAX_HEIGHT-int((gl_WorkGroupID.y+1)*SECTION_SIZE);
ivec3 data_pos=ivec3(gl_LocalInvocationID.x,(gl_WorkGroupID.y+1)*SECTION_SIZE-1,gl_LocalInvocationID.z);
vec3 noise3_pos=vec3(noise2_pos.x,y,noise2_pos.y);
for(int i=0;i<SECTION_SIZE;++i)
{
if(noise3_pos.y>noise2_val)
setcubedata(data_pos,0);
else setcubedata(data_pos,abs(generate_noise3(noise3_pos))>noise3_threshold?1:0);
data_pos.y-=1;
noise3_pos.y+=1.0;
}
}