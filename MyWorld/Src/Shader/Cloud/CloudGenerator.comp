#version 460 core
const int FBM=6;
const int SECTION_SIZE=32;
const float FBM_DIV=(2.0-pow(0.5,FBM-1));
const int permutation_table_nums=256;
const int[permutation_table_nums]permutation_table={151,160,137,91,90,15, 131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37, 240,21,10,23, 190, 6,148,247,120,234,75,0,26,197,62,94,252,219, 203,117,35,11,32,57,177,33, 88,237,149,56,87,174,20,125,136,171, 168, 68,175,74,165,71,134,139,48,27,166, 77,146,158,231,83,111, 229,122,60,211,133,230,220,105,92,41,55,46,245,40,244, 102,143, 54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,    196, 135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217, 226,250,124,123, 5,202,38,147,118,126,255,82,85,212,207,206,59,    227,47,16,58,17,182,189,28,42, 223,183,170,213,119,248,152, 2,    44,154,163, 70,221,153,101,155,167, 43,172,9, 129,22,39,253, 19, 98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228, 251,    34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14, 239,107, 49,192,214, 31,181,199,106,157,184, 84,204,176,115,121, 50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141, 128,195,78,66,215,61,156,180};
const int gradient3_table_nums=12;
const vec3 gradient3_table[gradient3_table_nums]=
{vec3(1.0,1.0,0.0),vec3(-1.0,1.0,0.0),vec3(1.0,-1.0,0.0),vec3(-1.0,-1.0,0.0),
vec3(1.0,0.0,1.0),vec3(-1.0,0.0,1.0),vec3(1.0,0.0,-1.0),vec3(-1.0,0.0,-1.0),
vec3(0.0,1.0,1.0),vec3(0.0,-1.0,1.0),vec3(0.0,1.0,-1.0),vec3(0.0,-1.0,-1.0)};
layout(local_size_x=32,local_size_y=1,local_size_z=32)in;
uniform float time;
layout(r16f)uniform  image2D cloud;
float Smooth(float v)
{
return pow(v,3.0)*(v*(6.0*v-15.0)+10.0);
}
vec3 get_gradient3(ivec3 index)
{
index%=permutation_table_nums;
index=abs(index);
ivec3 index_;
index_.x=permutation_table[index.x];
index_.y=permutation_table[index.y];
index_.z=permutation_table[index.z];
int final_index=(index_.x+index_.y+index_.z)%gradient3_table_nums;
return gradient3_table[final_index];
}
//////////////////////////////////////////产生三维噪声
float generate_noise3(vec3 pos)
{
vec3 lowtopleft=floor(pos);
vec3 lowtopright=lowtopleft+vec3(1.0,0.0,0.0);
vec3 lowbottomleft=lowtopleft+vec3(0.0,0.0,1.0);
vec3 lowbottomright=lowtopleft+vec3(1.0,0.0,1.0);
vec3 hightopleft=lowtopleft+vec3(0.0,1.0,0.0);
vec3 hightopright=hightopleft+vec3(1.0,0.0,0.0);
vec3 highbottomleft=hightopleft+vec3(0.0,0.0,1.0);
vec3 highbottomright=hightopleft+vec3(1.0,0.0,1.0);
////////////////////////////////////////////////////计算当前位置与区块的偏移
vec3 vec_lowtopleft=pos-lowtopleft;
vec3 vec_lowtopright=pos-lowtopright;
vec3 vec_lowbottomleft=pos-lowbottomleft;
vec3 vec_lowbottomright=pos-lowbottomright;
vec3 vec_hightopleft=pos-hightopleft;
vec3 vec_hightopright=pos-hightopright;
vec3 vec_highbottomleft=pos-highbottomleft;
vec3 vec_highbottomright=pos-highbottomright;
////////////////////////////////////////////////////得到八个顶点的梯度
lowtopleft=get_gradient3(ivec3(lowtopleft));
lowtopright=get_gradient3(ivec3(lowtopright));
lowbottomleft=get_gradient3(ivec3(lowbottomleft));
lowbottomright=get_gradient3(ivec3(lowbottomright));
hightopleft=get_gradient3(ivec3(hightopleft));
hightopright=get_gradient3(ivec3(hightopright));
highbottomleft=get_gradient3(ivec3(highbottomleft));
highbottomright=get_gradient3(ivec3(highbottomright));
/////////////////////////////////////////////////对底面进行插值
float v1=dot(lowtopleft,vec_lowtopleft),v2=dot(lowtopright,vec_lowtopright);
float v3=dot(lowbottomleft,vec_lowbottomleft),v4=dot(lowbottomright,vec_lowbottomright);
float s1=Smooth(vec_lowtopleft.x);
float v12=mix(v1,v2,s1),v34=mix(v3,v4,s1);
float v56=mix(v12,v34,Smooth(vec_lowtopleft.z));
/////////////////////////////////////////////////对顶面进行插值
v1=dot(hightopleft,vec_hightopleft),v2=dot(hightopright,vec_hightopright);
v3=dot(highbottomleft,vec_highbottomleft),v4=dot(highbottomright,vec_highbottomright);
s1=Smooth(vec_hightopleft.x);
v12=mix(v1,v2,s1),v34=mix(v3,v4,s1);
float v78=mix(v12,v34,Smooth(vec_hightopleft.z));
return mix(v56,v78,Smooth(vec_lowtopleft.y));
}
void main()
{
float res=0.0;
float pl=1.0;
float zf=1.0;
vec2 real_pos=gl_GlobalInvocationID.xz;
vec3 noisePos=vec3(real_pos/SECTION_SIZE,time);
for(int i=0;i<FBM;++i)
{
res+=generate_noise3(noisePos*pl)*zf;
zf*=0.5;
pl*=2;
}
res=(res/FBM_DIV)*0.5+0.5;
imageStore(cloud,ivec2(gl_GlobalInvocationID.xz),vec4(res,vec3(0.0)));
}